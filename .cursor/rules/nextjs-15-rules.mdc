---
description: 
globs: 
alwaysApply: false
---
# Next.js 15 + TypeScript + App Router + shadcn/ui 開発ルール

## 基本方針
- Next.js 15 App Routerを使用
- TypeScript strict modeで開発
- React 19とServer Componentsを活用
- shadcn/uiでUIコンポーネントを構築
- パフォーマンスとDXを重視

## プロジェクト構成

### ディレクトリ構造
```
src/
├── app/                    # App Router (Next.js 15)
│   ├── (dashboard)/       # Route Groups
│   ├── globals.css
│   ├── layout.tsx
│   └── page.tsx
├── components/            # 再利用可能なコンポーネント
│   ├── ui/               # shadcn/ui コンポーネント
│   └── forms/            # フォームコンポーネント
├── lib/                  # ユーティリティ・設定
│   └── utils.ts          # shadcn/ui utilities
├── hooks/                # カスタムフック
└── types/                # TypeScript型定義
```

## ファイル命名規則
- `kebab-case`でディレクトリ命名
- `PascalCase`でコンポーネントファイル命名
- `camelCase`でユーティリティ・フック命名
- `.tsx`拡張子でReactコンポーネント
- `.ts`拡張子でその他TypeScript

## Next.js 15 特有のルール

### App Router
- `src/app`下にページとレイアウトを配置
- `layout.tsx`, `page.tsx`, `loading.tsx`, `error.tsx`をルートファイルとして使用
- Route Groupsは`()`で囲んで整理

### Server Components (デフォルト)
```tsx
// デフォルトでServer Component
export default async function Page() {
  const data = await fetch('https://api.example.com/data')
  return <div>{data}</div>
}
```

### Client Components
```tsx
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)
  return <button onClick={() => setCount(count + 1)}>{count}</button>
}
```

### Async Request APIs (Next.js 15 Breaking Change)
```tsx
import { cookies, headers } from 'next/headers'

// Next.js 15ではasync/awaitが必要
export async function getServerSideProps() {
  const cookieStore = await cookies()
  const headersList = await headers()
  
  return {
    props: {}
  }
}
```

## shadcn/ui コンポーネント設計

### shadcn/ui セットアップ
```bash
# shadcn/ui初期化
npx shadcn@latest init

# コンポーネント追加
npx shadcn@latest add button
npx shadcn@latest add card
npx shadcn@latest add form
```

### components.jsonの設定
```json
{
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "slate",
    "cssVariables": true
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}
```

### UIコンポーネントの使用
```tsx
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'

export default function Dashboard() {
  return (
    <Card>
      <CardHeader>
        <CardTitle>ダッシュボード</CardTitle>
      </CardHeader>
      <CardContent>
        <Button variant="default">保存</Button>
        <Button variant="outline">キャンセル</Button>
      </CardContent>
    </Card>
  )
}
```

### カスタムコンポーネント
```tsx
// src/components/custom-card.tsx
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { cn } from '@/lib/utils'

interface CustomCardProps {
  title: string
  children: React.ReactNode
  className?: string
}

export function CustomCard({ title, children, className }: CustomCardProps) {
  return (
    <Card className={cn("w-full", className)}>
      <CardHeader>
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent>
        {children}
      </CardContent>
    </Card>
  )
}
```

## コンポーネント設計原則

### コンポーネント構造
```tsx
import { ReactNode } from 'react'
import { cn } from '@/lib/utils'

interface ComponentProps {
  children?: ReactNode
  className?: string
}

export default function Component({ children, className }: ComponentProps) {
  return (
    <div className={cn("default-styles", className)}>
      {children}
    </div>
  )
}
```

### Propsの型定義
- 全てのpropsに型を定義
- `children`は`ReactNode`型を使用
- オプショナルなpropsには`?`を付与
- `className`propは常に受け取れるように
- shadcn/uiのvariant typesを活用

### コンポーネント export
- デフォルトエクスポートを使用
- named exportは型やユーティリティのみ
- shadcn/uiコンポーネントはnamed export

## データフェッチング

### Server Componentsでのフェッチ
```tsx
// Next.js 15ではデフォルトでno-store
async function getData() {
  const res = await fetch('https://api.example.com/data', {
    cache: 'force-cache', // 明示的にキャッシュしたい場合
  })
  return res.json()
}

export default async function Page() {
  const data = await getData()
  return <div>{data.title}</div>
}
```

### Client Componentsでのフェッチ
```tsx
'use client'

import { useEffect, useState } from 'react'

export default function ClientComponent() {
  const [data, setData] = useState(null)
  
  useEffect(() => {
    fetch('/api/data')
      .then(res => res.json())
      .then(setData)
  }, [])
  
  return <div>{data?.title}</div>
}
```

## Server Actions

### Server Actions定義
```tsx
'use server'

import { revalidatePath } from 'next/cache'

export async function createPost(formData: FormData) {
  const title = formData.get('title') as string
  
  // データベース操作
  await db.post.create({
    data: { title }
  })
  
  revalidatePath('/posts')
}
```

### フォームでの使用 (next/form + shadcn/ui)
```tsx
import Form from 'next/form'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { createPost } from './actions'

export default function PostForm() {
  return (
    <Form action={createPost} className="space-y-4">
      <div>
        <Label htmlFor="title">タイトル</Label>
        <Input
          id="title"
          name="title"
          type="text"
          required
          placeholder="投稿タイトルを入力"
        />
      </div>
      <Button type="submit">作成</Button>
    </Form>
  )
}
```

## スタイリング

### CSS Variables（shadcn/ui推奨）
```css
/* globals.css */
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 224 71.4% 4.1%;
    --primary: 220.9 39.3% 11%;
    --primary-foreground: 210 20% 98%;
  }
  
  .dark {
    --background: 224 71.4% 4.1%;
    --foreground: 210 20% 98%;
  }
}
```

### cn utility関数の使用
```tsx
import { cn } from '@/lib/utils'

export function Component({ className }: { className?: string }) {
  return (
    <div className={cn(
      "flex items-center justify-center",
      "rounded-md border border-input",
      "bg-background px-3 py-2",
      className
    )}>
      Content
    </div>
  )
}
```

### テーマシステム
```tsx
'use client'

import { useTheme } from 'next-themes'
import { Button } from '@/components/ui/button'

export function ThemeToggle() {
  const { setTheme, theme } = useTheme()
  
  return (
    <Button
      variant="outline"
      onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}
    >
      テーマ切り替え
    </Button>
  )
}
```

## フォーム処理

### React Hook Form + Zod + shadcn/ui
```tsx
'use client'

import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import * as z from 'zod'
import { Button } from '@/components/ui/button'
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'
import { Input } from '@/components/ui/input'

const formSchema = z.object({
  username: z.string().min(2, {
    message: "ユーザー名は2文字以上で入力してください",
  }),
})

export function ProfileForm() {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: "",
    },
  })

  function onSubmit(values: z.infer<typeof formSchema>) {
    console.log(values)
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>ユーザー名</FormLabel>
              <FormControl>
                <Input placeholder="ユーザー名を入力" {...field} />
              </FormControl>
              <FormDescription>
                公開プロフィールに表示される名前です。
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">更新</Button>
      </form>
    </Form>
  )
}
```

## パフォーマンス最適化

### 画像最適化
```tsx
import Image from 'next/image'

export default function ImageComponent() {
  return (
    <Image
      src="/image.jpg"
      alt="説明"
      width={600}
      height={400}
      priority // Above the fold画像の場合
    />
  )
}
```

### 動的インポート
```tsx
import dynamic from 'next/dynamic'

const DynamicComponent = dynamic(() => import('./HeavyComponent'), {
  loading: () => <p>読み込み中...</p>,
})
```

### Partial Prerendering (PPR) 対応
```tsx
import { Suspense } from 'react'
import { Skeleton } from '@/components/ui/skeleton'

export const experimental_ppr = true

export default function Page() {
  return (
    <>
      <StaticContent />
      <Suspense fallback={<Skeleton className="w-full h-20" />}>
        <DynamicContent />
      </Suspense>
    </>
  )
}
```

## エラーハンドリング

### Error Boundaries
```tsx
'use client'

import { useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    console.error(error)
  }, [error])

  return (
    <Card className="max-w-md mx-auto mt-8">
      <CardHeader>
        <CardTitle>エラーが発生しました</CardTitle>
      </CardHeader>
      <CardContent>
        <p className="text-muted-foreground mb-4">
          申し訳ございませんが、問題が発生しました。
        </p>
        <Button onClick={() => reset()}>再試行</Button>
      </CardContent>
    </Card>
  )
}
```

### 認証エラー (Next.js 15.1 experimental)
```tsx
import { unauthorized, forbidden } from 'next/navigation'

export default async function ProtectedPage() {
  const session = await getSession()
  
  if (!session) {
    unauthorized() // 401エラー
  }
  
  if (!session.isAdmin) {
    forbidden() // 403エラー
  }
  
  return <AdminDashboard />
}
```

## TypeScript設定

### 厳密な型チェック
```json
{
  "compilerOptions": {
    "strict": true,
    "noUncheckedIndexedAccess": true,
    "exactOptionalPropertyTypes": true
  }
}
```

### コンポーネントProps型定義
```tsx
import { ButtonProps } from '@/components/ui/button'

interface Props extends ButtonProps {
  title: string
  description?: string
  onClick: () => void
  items: readonly string[]
}
```

## テスト

### コンポーネントテスト
```tsx
import { render, screen } from '@testing-library/react'
import { Button } from '@/components/ui/button'

test('ボタンが正しくレンダリングされる', () => {
  render(<Button>テストボタン</Button>)
  expect(screen.getByRole('button', { name: 'テストボタン' })).toBeInTheDocument()
})
```

## アクセシビリティ

### shadcn/uiのアクセシビリティ機能
- すべてのコンポーネントはアクセシビリティを考慮して設計
- 適切なARIA属性が自動で設定
- キーボードナビゲーション対応

### カスタムコンポーネントでの注意点
```tsx
import { Button } from '@/components/ui/button'

export function CustomButton() {
  return (
    <Button
      aria-label="詳細な説明"
      aria-describedby="help-text"
    >
      アクション
    </Button>
  )
}
```

## セキュリティ

### Server Actions
- 入力値の検証を必ず実装
- CSRFトークンの使用を検討
- 権限チェックを忘れずに

### 環境変数
- `.env.local`でローカル環境変数を管理
- `NEXT_PUBLIC_`プレフィックスでクライアント公開

## パッケージ管理

### メインライブラリ（2024年12月現在のバージョン）
```bash
# フレームワーク & コア
pnpm add next@15.3.3 react@19.1.0 react-dom@19.1.0

# Radix UI (shadcn/ui基盤)
pnpm add @radix-ui/react-slot@1.2.3
pnpm add @radix-ui/react-dialog@1.1.14
pnpm add @radix-ui/react-dropdown-menu@2.1.15
pnpm add @radix-ui/react-label@2.1.7
pnpm add @radix-ui/react-select@2.2.5
pnpm add @radix-ui/react-separator@1.1.7
pnpm add @radix-ui/react-toast@1.2.14
pnpm add @radix-ui/react-tooltip@1.2.7
pnpm add @radix-ui/react-popover@1.1.14
pnpm add @radix-ui/react-avatar@1.1.10
pnpm add @radix-ui/react-checkbox@1.3.2
pnpm add @radix-ui/react-form@0.1.7
pnpm add @radix-ui/react-icons@1.3.2
pnpm add @radix-ui/react-navigation-menu@1.2.13
pnpm add @radix-ui/react-progress@1.1.7
pnpm add @radix-ui/react-radio-group@1.3.7
pnpm add @radix-ui/react-slider@1.3.5
pnpm add @radix-ui/react-switch@1.2.5
pnpm add @radix-ui/react-tabs@1.1.12
pnpm add @radix-ui/react-toggle@1.1.9
pnpm add @radix-ui/react-accordion@1.2.11
pnpm add @radix-ui/react-alert-dialog@1.1.14
pnpm add @radix-ui/react-aspect-ratio@1.1.7
pnpm add @radix-ui/react-collapsible@1.1.11
pnpm add @radix-ui/react-context-menu@2.2.15
pnpm add @radix-ui/react-hover-card@1.1.14
pnpm add @radix-ui/react-menubar@1.1.15
pnpm add @radix-ui/react-scroll-area@1.2.9
pnpm add @radix-ui/react-toggle-group@1.1.10

# shadcn/ui ユーティリティ
pnpm add class-variance-authority@0.7.1
pnpm add clsx@2.1.1
pnpm add tailwind-merge@3.3.0
pnpm add lucide-react@0.511.0

# テーマ管理
pnpm add next-themes@0.4.6

# フォーム & バリデーション
pnpm add react-hook-form@7.56.4
pnpm add @hookform/resolvers@5.0.1
pnpm add zod@3.25.42
```

### 開発依存関係
```bash
# TypeScript & ESLint
pnpm add -D typescript@5.8.3
pnpm add -D @types/node@20.17.57
pnpm add -D @types/react@19.1.6
pnpm add -D @types/react-dom@19.1.5
pnpm add -D eslint@9.28.0
pnpm add -D eslint-config-next@15.3.3
pnpm add -D @eslint/eslintrc@3.3.1

# Tailwind CSS
pnpm add -D tailwindcss@4.1.8
pnpm add -D postcss@8.5.4
pnpm add -D autoprefixer@10.4.21
pnpm add -D @tailwindcss/typography@0.5.16

# テスト
pnpm add -D @testing-library/react@16.3.0
pnpm add -D @testing-library/jest-dom@6.6.3
pnpm add -D @testing-library/user-event@14.6.1
pnpm add -D vitest@3.1.4
pnpm add -D @vitejs/plugin-react@4.5.0
pnpm add -D jsdom@26.1.0
```

### package.jsonスクリプト
```json
{
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "test:coverage": "vitest --coverage"
  }
}
```

### Turbopack
```json
{
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build"
  }
}
```

## デプロイ・設定

### next.config.ts
```typescript
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    turbo: {
      treeShaking: true
    },
    ppr: 'incremental',
    after: true
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'example.com'
      }
    ]
  }
}

export default nextConfig
```

## 注意すべきNext.js 15の変更点

### Breaking Changes
- Async Request APIs (`cookies`, `headers`, `params`, `searchParams`)
- デフォルトキャッシュ動作の変更 (no-store)
- React 19サポート

### 新機能
- `next/form`コンポーネント
- `after()` API (stable)
- Static Route Indicator
- Turbopack Dev (stable)
- ESLint 9サポート

## shadcn/ui ベストプラクティス

### コンポーネントカスタマイズ
- 既存のコンポーネントは`components/ui`内を直接編集
- バリアント追加は`class-variance-authority`を使用
- カスタムコンポーネントは別ディレクトリに配置

### テーマ管理
- CSS変数でテーマ管理
- `next-themes`でダークモード対応
- デザインシステムの一貫性を保持

これらのルールに従って、shadcn/uiとNext.js 15を活用した保守性が高く、美しいUIを持つアプリケーションを開発してください。
